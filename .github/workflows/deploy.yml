name: Deploy Hello World to AWS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1 # Passe ggf. an
      ECR_REPOSITORY: hello-world-repo # Passe ggf. an
      IMAGE_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ./hello-world
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "Image successfully pushed to ECR:"
          echo "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      - name: Deploy to AWS Lambda (Container)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          FUNCTION_NAME=hello-world-lambda
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          
          echo "Attempting to deploy container to AWS Lambda..."
          
          # Check if function exists
          if aws lambda get-function --function-name $FUNCTION_NAME > /dev/null 2>&1; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name $FUNCTION_NAME \
              --image-uri $IMAGE_URI
          else
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name $FUNCTION_NAME \
              --package-type Image \
              --code ImageUri=$IMAGE_URI \
              --role arn:aws:iam::200186773643:role/LabRole \
              --timeout 30 \
              --memory-size 512 || echo "Lambda creation failed, trying EC2 deployment..."
          fi

      - name: Create Lambda Function URL and display access information
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          FUNCTION_NAME=hello-world-lambda
          
          echo "Setting up public access to your container..."
          
          # Create or update function URL configuration
          FUNCTION_URL=$(aws lambda create-function-url-config \
            --function-name $FUNCTION_NAME \
            --auth-type NONE \
            --cors 'AllowCredentials=false,AllowHeaders=date,keep-alive,AllowMethods=*,AllowOrigins=*,ExposeHeaders=date,keep-alive,MaxAge=86400' \
            --query 'FunctionUrl' --output text 2>/dev/null || \
            aws lambda get-function-url-config --function-name $FUNCTION_NAME --query 'FunctionUrl' --output text 2>/dev/null)
          
          if [ ! -z "$FUNCTION_URL" ]; then
            echo "=============================================="
            echo "üéâ DEPLOYMENT SUCCESSFUL!"
            echo "=============================================="
            echo "Your container is now running and accessible at:"
            echo ""
            echo "üìç Function URL: $FUNCTION_URL"
            echo ""
            echo "You can view your Hello World application by opening this URL in your browser."
            echo "=============================================="
            
            # Also get the Lambda function ARN for reference
            FUNCTION_ARN=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.FunctionArn' --output text)
            echo "üìã Lambda Function ARN: $FUNCTION_ARN"
            echo "üê≥ Container Image: $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          else
            echo "‚ùå Failed to create Function URL. The Lambda function may not have been created successfully."
          fi

      - name: Try EC2 deployment as fallback
        if: failure()
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Lambda deployment failed, checking EC2 options..."
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          
          # List available EC2 instances
          echo "Available EC2 instances:"
          aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,PublicIpAddress]' --output table || echo "No EC2 access"
          
          echo "Container image ready for manual deployment: $IMAGE_URI"
          echo "You can manually deploy this to EC2 or other available compute services."
