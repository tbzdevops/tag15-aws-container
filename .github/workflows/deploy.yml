name: Deploy Hello World to AWS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1 # Passe ggf. an
      ECR_REPOSITORY: hello-world-repo # Passe ggf. an
      IMAGE_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ./hello-world
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "Image successfully pushed to ECR:"
          echo "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      - name: Make ECR image public
        run: |
          aws ecr set-repository-policy \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --policy-text '{
              "Version": "2008-10-17",
              "Statement": [
                {
                  "Sid": "AllowPull",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability"
                  ]
                }
              ]
            }'

      - name: Deploy to EC2 Instance
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          
          echo "Attempting to deploy container to EC2..."
          
          # Check if there's an existing EC2 instance we can use
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=hello-world-container" \
            --query 'Reservations[0].Instances[0].InstanceId' --output text 2>/dev/null)
          
          if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "No existing hello-world EC2 instance found. Creating new instance..."
            
            # Get the default VPC and subnet
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
            SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0].SubnetId' --output text)
            
            # Create security group for HTTP access
            SECURITY_GROUP_ID=$(aws ec2 create-security-group \
              --group-name hello-world-sg \
              --description "Security group for Hello World container" \
              --vpc-id $VPC_ID \
              --query 'GroupId' --output text 2>/dev/null || \
              aws ec2 describe-security-groups --filters "Name=group-name,Values=hello-world-sg" --query 'SecurityGroups[0].GroupId' --output text)
            
            # Allow HTTP traffic
            aws ec2 authorize-security-group-ingress \
              --group-id $SECURITY_GROUP_ID \
              --protocol tcp \
              --port 80 \
              --cidr 0.0.0.0/0 2>/dev/null || echo "Security group rule already exists"
            
            # Create user data script to automatically setup and run container
            USER_DATA="#!/bin/bash
            yum update -y
            amazon-linux-extras install docker -y
            sudo systemctl enable docker
            service docker start
            usermod -a -G docker ec2-user
            curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"
            unzip awscliv2.zip
            ./aws/install
            sleep 10
            mkdir -p /home/ec2-user/.aws
            cat <<EOF > /home/ec2-user/.aws/credentials
            [default]
            aws_access_key_id=${AWS_ACCESS_KEY_ID}
            aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
            aws_session_token=${AWS_SESSION_TOKEN}
            EOF
            chown -R ec2-user:ec2-user /home/ec2-user/.aws
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
            aws ecr get-login-password --region us-east-1  | docker login --username AWS --password-stdin 200186773643.dkr.ecr.us-east-1.amazonaws.com/hello-world-repo
            echo \"Container deployment completed\" > /var/log/container-deploy.log"
            
            # Replace placeholder with actual image URI
            USER_DATA_FINAL=$(echo "$USER_DATA" | sed "s|IMAGE_URI_PLACEHOLDER|$IMAGE_URI|g")
            USER_DATA_ENCODED=$(echo "$USER_DATA_FINAL" | base64 -w 0)
            
            # Launch EC2 instance with Amazon Linux 2
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0c02fb55956c7d316 \
              --instance-type t2.micro \
              --subnet-id $SUBNET_ID \
              --security-group-ids $SECURITY_GROUP_ID \
              --associate-public-ip-address \
              --iam-instance-profile Name=LabInstanceProfile \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=hello-world-container}]' \
              --user-data "$USER_DATA_ENCODED" \
              --query 'Instances[0].InstanceId' --output text)
            
            echo "Created new EC2 instance: $INSTANCE_ID"
            echo "Instance is automatically configuring Docker and starting the container..."
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            
            # Wait additional time for user data script to complete
            echo "Waiting for container deployment to complete..."
            sleep 120
          else
            echo "Using existing EC2 instance: $INSTANCE_ID"
            echo "Updating container on existing instance..."
          fi
          
          # Get instance public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          
          echo "Instance Public IP: $PUBLIC_IP"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Update container on existing EC2 instance
        if: env.INSTANCE_ID != ''
        run: |
          echo "Ensuring latest container is running on EC2 instance..."
          
          # Use SSM to update the container on existing instance
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_URI }}",
              "docker stop hello-world || true",
              "docker rm hello-world || true",
              "docker pull ${{ env.IMAGE_URI }}",
              "docker run -d --name hello-world -p 80:80 200186773643.dkr.ecr.us-east-1.amazonaws.com/hello-world-repo,
              "echo \"Container updated successfully\" > /var/log/container-update.log"
            ]' \
            --query 'Command.CommandId' --output text 2>/dev/null || echo "")
          
          if [ ! -z "$COMMAND_ID" ]; then
            echo "‚úÖ Container update command sent via SSM. Command ID: $COMMAND_ID"
            sleep 30  # Wait for command to execute
          else
            echo "‚ÑπÔ∏è  SSM not available, container should be running from user data script"
          fi

      - name: Display deployment URL and status
        run: |
          echo "=============================================="
          echo "üéâ DEPLOYMENT COMPLETE!"
          echo "=============================================="
          echo "Your container is now running on EC2:"
          echo ""
          echo "üìç EC2 Instance ID: ${{ env.INSTANCE_ID }}"
          echo "üåê Public IP Address: ${{ env.PUBLIC_IP }}"
          echo "üê≥ Container Image: ${{ env.IMAGE_URI }}"
          echo ""
          echo "üîó Your Hello World application is accessible at:"
          echo "   http://${{ env.PUBLIC_IP }}"
          echo ""
          echo "üîç To check container status, you can:"
          echo "   - Open the URL above in your browser"
          echo "   - SSH to the instance and run: docker ps"
          echo "=============================================="
          
          # Try to test if the application is responding
          echo "Testing application availability..."
          for i in {1..5}; do
            if curl -s -o /dev/null -w "%{http_code}" "http://${{ env.PUBLIC_IP }}" | grep -q "200\|404\|503"; then
              echo "‚úÖ Application is responding!"
              break
            else
              echo "‚è≥ Waiting for application to start... (attempt $i/5)"
              sleep 10
            fi
          done
