name: Deploy Hello World to AWS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1 # Passe ggf. an
      ECR_REPOSITORY: hello-world-repo # Passe ggf. an
      IMAGE_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ./hello-world
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "Image successfully pushed to ECR:"
          echo "$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

      - name: Deploy to EC2 Instance
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          
          echo "Attempting to deploy container to EC2..."
          
          # Check if there's an existing EC2 instance we can use
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=hello-world-*" \
            --query 'Reservations[0].Instances[0].InstanceId' --output text 2>/dev/null)
          
          if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "No existing hello-world EC2 instance found. Creating new instance..."
            
            # Get the default VPC and subnet
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
            SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[0].SubnetId' --output text)
            
            # Create security group for HTTP access
            SECURITY_GROUP_ID=$(aws ec2 create-security-group \
              --group-name hello-world-sg \
              --description "Security group for Hello World container" \
              --vpc-id $VPC_ID \
              --query 'GroupId' --output text 2>/dev/null || \
              aws ec2 describe-security-groups --filters "Name=group-name,Values=hello-world-sg" --query 'SecurityGroups[0].GroupId' --output text)
            
            # Allow HTTP traffic
            aws ec2 authorize-security-group-ingress \
              --group-id $SECURITY_GROUP_ID \
              --protocol tcp \
              --port 80 \
              --cidr 0.0.0.0/0 2>/dev/null || echo "Security group rule already exists"
            
            # Launch EC2 instance with Amazon Linux 2
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0c02fb55956c7d316 \
              --instance-type t2.micro \
              --subnet-id $SUBNET_ID \
              --security-group-ids $SECURITY_GROUP_ID \
              --associate-public-ip-address \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=hello-world-container}]' \
              --user-data '#!/bin/bash
              yum update -y
              amazon-linux-extras install docker -y
              service docker start
              usermod -a -G docker ec2-user' \
              --query 'Instances[0].InstanceId' --output text)
            
            echo "Created new EC2 instance: $INSTANCE_ID"
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          else
            echo "Using existing EC2 instance: $INSTANCE_ID"
          fi
          
          # Get instance public IP
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          
          echo "Instance Public IP: $PUBLIC_IP"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy container to EC2 and display URL
        run: |
          echo "Configuring EC2 instance to run the container..."
          
          # Wait a bit more for the instance to be fully ready
          sleep 30
          
          # Connect to instance and run container (simulated - in real scenario you'd use SSH)
          echo "=============================================="
          echo "üéâ DEPLOYMENT CONFIGURATION COMPLETE!"
          echo "=============================================="
          echo "Your container deployment details:"
          echo ""
          echo "üìç EC2 Instance ID: ${{ env.INSTANCE_ID }}"
          echo "üåê Public IP Address: ${{ env.PUBLIC_IP }}"
          echo "üê≥ Container Image: ${{ env.IMAGE_URI }}"
          echo ""
          echo "To complete the deployment, connect to your EC2 instance and run:"
          echo "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_URI }}"
          echo "docker run -d -p 80:80 ${{ env.IMAGE_URI }}"
          echo ""
          echo "üîó Your application will be accessible at: http://${{ env.PUBLIC_IP }}"
          echo "=============================================="
          
          # Try to get ECR login and run container via Systems Manager (if available)
          aws ssm send-command \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_URI }}", "docker stop hello-world || true", "docker rm hello-world || true", "docker run -d --name hello-world -p 80:80 ${{ env.IMAGE_URI }}"]' \
            --output text > /dev/null 2>&1 && echo "‚úÖ Container deployed automatically via SSM" || echo "‚ÑπÔ∏è  Manual deployment required (SSM not available)"
